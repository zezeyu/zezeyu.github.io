<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白日梦想家</title>
  
  <subtitle>晴天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-04-20T03:06:56.048Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小盒子</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo博客迁移到新电脑</title>
    <link href="http://yoursite.com/2022/04/20/hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0%E6%96%B0%E7%94%B5%E8%84%91/"/>
    <id>http://yoursite.com/2022/04/20/hexo博客迁移到新电脑/</id>
    <published>2022-04-20T02:42:55.000Z</published>
    <updated>2022-04-20T03:06:56.048Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>买了新的电脑。hexo塔建的博客需要迁移到新的电脑上来。</p><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p>把之前旧电脑上的blog文件夹，复制到硬盘里。然后将以下几个文件复制到新电脑的博客文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">themes</span><br><span class="line">source</span><br><span class="line">scaffolds</span><br><span class="line">package.json</span><br></pre></td></tr></table></figure></p><p>就要这个几个，其余的咱都不要。</p><h3 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h3><p>在博客目录下依次执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save # 为了使用hexo d来部署到git上 </span><br><span class="line">npm install hexo-generator-feed --save # 为了建立RSS订阅</span><br><span class="line">npm install hexo-generator-sitemap --save # 为了建立站点地图</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><h3 id="你以为搞定了"><a href="#你以为搞定了" class="headerlink" title="你以为搞定了"></a>你以为搞定了</h3><p>依次执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><h3 id="惊喜"><a href="#惊喜" class="headerlink" title="惊喜"></a>惊喜</h3><p>什么是惊喜，惊喜就是你以为搞定了，上面命令都执行成功了，新写的文章一直发布不到博客上。原因是hexo s的时候报了一个不起眼的警告，大致如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next </span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It&apos;s rebase to v6.0.0 and future maintenance will resume there</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br><span class="line">(node:12921) Warning: Accessing non-existent property &apos;lineno&apos; of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:12921) Warning: Accessing non-existent property &apos;column&apos; of module exports inside circular dependency</span><br><span class="line">(node:12921) Warning: Accessing non-existent property &apos;filename&apos; of module exports inside circular dependency</span><br><span class="line">(node:12921) Warning: Accessing non-existent property &apos;lineno&apos; of module exports inside circular dependency</span><br><span class="line">(node:12921) Warning: Accessing non-existent property &apos;column&apos; of module exports inside circular dependency</span><br><span class="line">(node:12921) Warning: Accessing non-existent property &apos;filename&apos; of module exports inside circular dependency</span><br></pre></td></tr></table></figure></p><p>这是因为node版本和之前不统一，新电脑上的node版本太高了，你得在装一下低一点的，想想之前的版本大概是多少。</p><h3 id="安装-n"><a href="#安装-n" class="headerlink" title="安装 n"></a>安装 n</h3><p>n是node版本管理工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g n</span><br><span class="line">安装你需要的node版本</span><br><span class="line">sudo n &lt;node版本号&gt;</span><br><span class="line">例如：</span><br><span class="line">sudo n 12.0.0</span><br><span class="line">查看自己node版本</span><br><span class="line">n ls</span><br><span class="line">切换node版本</span><br><span class="line">n （是的直接一个n完事，会出现已有的node版本供你选择）</span><br></pre></td></tr></table></figure></p><p>其他命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 安装最新版本</span><br><span class="line">sudo n latest</span><br><span class="line">// 安装稳定版本</span><br><span class="line">sudo n stable</span><br><span class="line">// 删除某个版本</span><br><span class="line">sudo n rm &lt;版本号&gt;</span><br></pre></td></tr></table></figure></p><h3 id="重新执行"><a href="#重新执行" class="headerlink" title="重新执行"></a>重新执行</h3><p>依次执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>不规则按钮-八边形遥控器实现</title>
    <link href="http://yoursite.com/2022/04/19/%E4%B8%8D%E8%A7%84%E5%88%99%E6%8C%89%E9%92%AE-%E5%85%AB%E8%BE%B9%E5%BD%A2%E9%81%A5%E6%8E%A7%E5%99%A8%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2022/04/19/不规则按钮-八边形遥控器实现/</id>
    <published>2022-04-19T10:22:42.000Z</published>
    <updated>2022-04-19T11:02:57.035Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>好久没有写博客了，写两年写前端写多了也好久没写iOS了，最近公司要开发framework，又开始撸iOS了~<br>最近在做智能家居的SDK开发，视频监控页面，需要有一个控制摄像头方向的遥控器，有8个方向可以控制,中间是一个OK按钮。<br>下面就简单的说一下思路和实现吧~</p><h4 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h4><p>很简单 还是用我最喜欢的贝塞尔曲线绘制一个八个方向的表盘，然后用把UIBezierPath交给CAShapeLayer来绘制。接着监听点击按压的位置在哪个path里面从而去实现对应的方法（改变方向区域的颜色、控制方向请求等。）！</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>1、第一步 画盘子 (下面方法是帮里画八等分的扇形)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-(void)initWithFrame:(CGRect)frame startAngle:(CGFloat)start endAngle:(CGFloat)end&#123;</span><br><span class="line">    UIBezierPath *bezierPath = [UIBezierPath bezierPath];</span><br><span class="line">    //画圆弧 逆时针半圈</span><br><span class="line">    [bezierPath addArcWithCenter:CGPointMake(self.frame.size.width/2, self.frame.size.height/2) radius:self.frame.size.width/2 startAngle:start endAngle:end clockwise:YES];</span><br><span class="line">    [bezierPath addLineToPoint:CGPointMake(self.frame.size.width/2, self.frame.size.height/2)];</span><br><span class="line">    [bezierPath closePath];</span><br><span class="line">    [bezierPath setLineWidth:1];</span><br><span class="line">    // 描边和填充</span><br><span class="line">    [bezierPath stroke];</span><br><span class="line">    [bezierPath fill];</span><br><span class="line">    </span><br><span class="line">    CAShapeLayer *layer = [CAShapeLayer layer];</span><br><span class="line">    layer.frame = self.bounds;</span><br><span class="line">    layer.path = bezierPath.CGPath;</span><br><span class="line">    layer.strokeColor = [UIColor colorWithRed:82/255.0 green:123/255.0 blue:249/255.0 alpha:1].CGColor;</span><br><span class="line">    layer.fillColor = [UIColor colorWithRed:82/255.0 green:123/255.0 blue:249/255.0 alpha:1].CGColor;</span><br><span class="line">    [self.layer addSublayer:layer];</span><br><span class="line">    </span><br><span class="line">    [self.pathArray addObject:layer];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>1、第二步 判断点击后需不需要响应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#上面方法已经存了path路径，只要根据path，在pointInside方法里面，判断点击事件该不该触发就行了（这也是不规则按钮必要用到的方法）</span><br><span class="line">-(BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event&#123;</span><br><span class="line">  #你肯定已经会了，自己判断吧兄弟萌</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>今天写这篇文章，主要是因为确实太久没更新了。写的不好，请多担待。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS push 转场动画</title>
    <link href="http://yoursite.com/2018/12/26/iOS-push-animation/"/>
    <id>http://yoursite.com/2018/12/26/iOS-push-animation/</id>
    <published>2018-12-26T14:48:30.000Z</published>
    <updated>2018-12-26T15:15:58.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>   iOS原生的push动画是从右往左的推过来的过渡动画，有些特殊的需求，我们就要去修改原生的push动画，那这个时候怎么做呢？<br>   有两种方法，以下就是介绍这两种方法的分别实现过程</p><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="/img/iOS/push_animation.gif" alt="示例"></p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>   瞌睡来了  我先睡觉了，明天来接着写。哈哈哈哈</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Inner Peace</title>
    <link href="http://yoursite.com/2018/05/17/Inner-Peace/"/>
    <id>http://yoursite.com/2018/05/17/Inner-Peace/</id>
    <published>2018-05-17T05:33:36.000Z</published>
    <updated>2018-05-17T05:38:44.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>“你要克服的是你的虚荣心，是你的炫耀欲，你要对付的是你时刻想要出风头的小聪明。”</p><p>人的一生，眼之所见耳之所听大多不同，于是体之所悟心之所感，都因为自己的经历和选择而不同。</p><p>就像“你的气质里，藏着你读过的书和跑过的步，爱过的人。”<br>本来生活给你一些东西，让你沉淀体会成长，你却要在它还没沉淀下的时候，把你觉得自己独特的看法，比别人多的东西迫不及待地拿出来炫耀，实打实也就罢了，偏偏三分要夸成七分，七分要讲成圆满。</p><p>不管对面人的心情，自顾自开心地讲下去……<br>有时候想想，确实挺不好看的。</p><p>所以我阿，想过很久，还是最初的想法：年纪轻轻，不懂什么大道理，那就一直保持谦逊想学的心。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>动画系列--接上篇 轮播图动画加三个View实现无限轮播器</title>
    <link href="http://yoursite.com/2018/05/09/%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97-%E6%8E%A5%E4%B8%8A%E7%AF%87-%E8%BD%AE%E6%92%AD%E5%9B%BE%E5%8A%A8%E7%94%BB%E5%8A%A0%E4%B8%89%E4%B8%AAView%E5%AE%9E%E7%8E%B0%E6%97%A0%E9%99%90%E8%BD%AE%E6%92%AD%E5%99%A8/"/>
    <id>http://yoursite.com/2018/05/09/动画系列-接上篇-轮播图动画加三个View实现无限轮播器/</id>
    <published>2018-05-09T14:47:23.000Z</published>
    <updated>2018-06-12T13:37:28.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本篇文章是接上篇文章的需求，完善第二个控制器的功能！<br>需要的效果如下：</p><p><img src="/img/iOS/animation2.gif" alt="示例"></p><p>如上图本次的功能点是轮播图的点位切换、大小渐变！和无限轮播器（三个View实现无限轮播）</p><h3 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h3><p><img src="/img/iOS/lunbo.png" alt="示例1"><br>1.当中间的View向左边或右边滑动时，中间的的middleImageView会随着偏移量变小，右边或左边的图片变大！它们的大小会互换！</p><h3 id="未完待续-要睡觉了-哈哈哈"><a href="#未完待续-要睡觉了-哈哈哈" class="headerlink" title="未完待续(要睡觉了 哈哈哈)"></a>未完待续(要睡觉了 哈哈哈)</h3><p>你可以先去看看我的demo吧<br>demo地址：<a href="https://github.com/zezeyu/rotation" target="_blank" rel="noopener">https://github.com/zezeyu/rotation</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>动画系列--View动画运用</title>
    <link href="http://yoursite.com/2018/05/08/%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97-View%E5%8A%A8%E7%94%BB%E8%BF%90%E7%94%A8/"/>
    <id>http://yoursite.com/2018/05/08/动画系列-View动画运用/</id>
    <published>2018-05-08T10:45:19.000Z</published>
    <updated>2018-05-09T14:37:24.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p> UIView动画是iOS开发中最最常用到的动画。用起来简单，就几句代码！能实现的功能也多！<br> 本篇文章就是带大家用UIView动画实现下面的需求！</p><p><img src="/img/iOS/animation1.gif" alt="示例"></p><h4 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h4><p>首先这个需求想到的第一逻辑是啥？<br>对！ 旋转！ 旋转过去后，在旋转回来！<br>旋转的时候还有跟着一起放大！<br>还有！位移！ 第二个界面有个位移动画！<br>紧接着问题来了？<br>第二个界面是新的控制器，是第一个界面push过去的！我们还考虑的问题是，怎么让iOS原生的动画变成我们这个动画? 这里有两种方案，第一种是自定义转场动画！另一种比较简单粗暴，就是将push动画移除，将push方法的animated设置为NO即可！<br>当然前提是push和pop前后要把动画衔接好！<br>同理pop回来的时候也需要把animated设置为NO！在pop回来的时候利用代理，或block执行旋转回来的动画！</p><h4 id="UIView动画属性和方法"><a href="#UIView动画属性和方法" class="headerlink" title="UIView动画属性和方法"></a>UIView动画属性和方法</h4><h5 id="可以设置的动画属性有"><a href="#可以设置的动画属性有" class="headerlink" title="可以设置的动画属性有"></a>可以设置的动画属性有</h5><blockquote><blockquote><blockquote><p>frame (改变坐标大小，也是最常使用的)<br>bounds (拉伸变化)<br>center (中心位置)<br>transform (旋转)<br>alpha (透明度)<br>backgroundColor (背景颜色)<br>拉伸内容 (contentStretch)</p></blockquote></blockquote></blockquote><h5 id="UIView-Block动画方法-最常用的，简单粗暴"><a href="#UIView-Block动画方法-最常用的，简单粗暴" class="headerlink" title="UIView Block动画方法 (最常用的，简单粗暴)"></a>UIView Block动画方法 (最常用的，简单粗暴)</h5><p>1、第一种，包含时间和动画！把要设置的动画属性写在方法体里面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[UIView animateWithDuration:(NSTimeInterval)  //动画持续时间</span><br><span class="line">                  animations:^&#123;</span><br><span class="line">                  //执行的动画</span><br><span class="line"> &#125;];</span><br></pre></td></tr></table></figure></p><p>2、第二种，带有动画完成回调的Block动画!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">animateWithDuration:动画持续时间</span><br><span class="line">animations:block方法体里面写需要设置的动画属性</span><br><span class="line">completion:block方法体里面写动画执行完毕后的操作</span><br><span class="line">*/</span><br><span class="line">[UIView animateWithDuration:(NSTimeInterval)  //动画持续时间</span><br><span class="line">                  animations:^&#123;</span><br><span class="line">                //执行的动画</span><br><span class="line"> &#125;                completion:^(BOOL finished) &#123;</span><br><span class="line">                //动画执行完毕后的操作</span><br><span class="line"> &#125;];</span><br></pre></td></tr></table></figure></p><p>3、可设置延迟时间和过渡效果的Block动画<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">animateWithDuration:动画持续时间</span><br><span class="line">delay:动画延迟执行的时间</span><br><span class="line">options:动画的过渡效果</span><br><span class="line">animations:block方法体里面写需要设置的动画属性</span><br><span class="line">completion:block方法体里面写动画执行完毕后的操作</span><br><span class="line">*/</span><br><span class="line">[UIView animateWithDuration:(NSTimeInterval) //动画持续时间</span><br><span class="line">                       delay:(NSTimeInterval) //动画延迟执行的时间</span><br><span class="line">                     options:(UIViewAnimationOptions) //动画的过渡效果</span><br><span class="line">                  animations:^&#123;</span><br><span class="line">                   //执行的动画</span><br><span class="line"> &#125;                completion:^(BOOL finished) &#123;</span><br><span class="line">                   //动画执行完毕后的操作</span><br><span class="line"> &#125;];</span><br></pre></td></tr></table></figure></p><p>简单说下UIViewAnimationOptions的枚举值(这个也是百度的啦)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">UIViewAnimationOptionLayoutSubviews            //进行动画时布局子控件</span><br><span class="line">UIViewAnimationOptionAllowUserInteraction      //进行动画时允许用户交互</span><br><span class="line">UIViewAnimationOptionBeginFromCurrentState     //从当前状态开始动画</span><br><span class="line">UIViewAnimationOptionRepeat                    //无限重复执行动画</span><br><span class="line">UIViewAnimationOptionAutoreverse               //执行动画回路</span><br><span class="line">UIViewAnimationOptionOverrideInheritedDuration //忽略嵌套动画的执行时间设置</span><br><span class="line">UIViewAnimationOptionOverrideInheritedCurve    //忽略嵌套动画的曲线设置</span><br><span class="line">UIViewAnimationOptionAllowAnimatedContent      //转场：进行动画时重绘视图</span><br><span class="line">UIViewAnimationOptionShowHideTransitionViews   //转场：移除（添加和移除图层的）动画效果</span><br><span class="line">UIViewAnimationOptionOverrideInheritedOptions  //不继承父动画设置</span><br><span class="line"></span><br><span class="line">UIViewAnimationOptionCurveEaseInOut            //时间曲线，慢进慢出（默认值）</span><br><span class="line">UIViewAnimationOptionCurveEaseIn               //时间曲线，慢进</span><br><span class="line">UIViewAnimationOptionCurveEaseOut              //时间曲线，慢出</span><br><span class="line">UIViewAnimationOptionCurveLinear               //时间曲线，匀速</span><br><span class="line"></span><br><span class="line">UIViewAnimationOptionTransitionNone            //转场，不使用动画</span><br><span class="line">UIViewAnimationOptionTransitionFlipFromLeft    //转场，从左向右旋转翻页</span><br><span class="line">UIViewAnimationOptionTransitionFlipFromRight   //转场，从右向左旋转翻页</span><br><span class="line">UIViewAnimationOptionTransitionCurlUp          //转场，下往上卷曲翻页</span><br><span class="line">UIViewAnimationOptionTransitionCurlDown        //转场，从上往下卷曲翻页</span><br><span class="line">UIViewAnimationOptionTransitionCrossDissolve   //转场，交叉消失和出现</span><br><span class="line">UIViewAnimationOptionTransitionFlipFromTop     //转场，从上向下旋转翻页</span><br><span class="line">UIViewAnimationOptionTransitionFlipFromBottom  //转场，从下向上旋转翻页</span><br></pre></td></tr></table></figure></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>首先是第一个页面，需要创建4个不同UIView！（这里我们用UIButton代替，有点击事件）<br>然后当View被点击的时候，需要修改被几点View的坐标尺寸(这里就是放大效果了)！和旋转动画<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> ///将点击过后的view移动到最上层</span><br><span class="line"> [self.view bringSubviewToFront:sender];</span><br><span class="line">///计算一下改变后的坐标</span><br><span class="line">float h = ( kScreenHeight - kScreenWidth )/2;</span><br><span class="line">float w = ( kScreenWidth - kScreenHeight )/2;</span><br><span class="line"></span><br><span class="line"> ///下面的这个imageView一会儿做解释</span><br><span class="line"> imageview.image = [UIImage imageNamed:bgImageArray[sender.tag-100]];</span><br><span class="line"> ///点击的时候将按钮的image设置为空</span><br><span class="line"> [sender setImage:[UIImage imageNamed:@&quot;&quot;] forState:UIControlStateNormal];</span><br><span class="line"> [UIView animateWithDuration:0.5f animations:^&#123;</span><br><span class="line">     ///修改坐标尺寸大小（改变frame的放大动画）</span><br><span class="line">     sender.frame = CGRectMake(w, h, kScreenHeight, kScreenWidth);</span><br><span class="line">     ///这个就是旋转动画了  M_PI_2(顺时针旋转90度)</span><br><span class="line">     [sender setTransform:CGAffineTransformMakeRotation(M_PI_2)];</span><br><span class="line">     </span><br><span class="line"> &#125; completion:^(BOOL finished) &#123;</span><br><span class="line"> ///这句是多加的，用来容错的！动画结束后确定下坐标值</span><br><span class="line">     sender.frame = CGRectMake(w, h, kScreenHeight, kScreenWidth);</span><br><span class="line">     ///当动画执行完毕后，push到下一个控制器</span><br><span class="line">     testViewController * test = [[testViewController alloc]init];</span><br><span class="line">     test.delegate = self;</span><br><span class="line">     test.index = sender.tag;</span><br><span class="line">     ///push方法的 animated设置为NO，这个很关键！！！（取消自带的push动画）</span><br><span class="line">     [self.navigationController pushViewController:test animated:NO];</span><br><span class="line"></span><br><span class="line">     ///下面的这个imageView一会儿做解释</span><br><span class="line">     ///将imageView放到最上面，为了pop回来的旋转回来的动画能够衔接</span><br><span class="line">     [self.view bringSubviewToFront:imageview];</span><br><span class="line">     ///每次旋转动画完毕后让imageView重新回到之前状态,等待回来时的旋转动画</span><br><span class="line">     imageview.frame=CGRectMake(w, h, kScreenHeight, kScreenWidth);</span><br><span class="line">     [imageview setTransform:CGAffineTransformMakeRotation(M_PI_2)];</span><br><span class="line"> &#125;];</span><br></pre></td></tr></table></figure></p><p>然后pop回来时也不要忘记了将pop的animated设置为NO<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self.navigationController popViewControllerAnimated:NO];</span><br></pre></td></tr></table></figure></p><p>pop回来执行代理方法，代理方法里面写旋转回来，和同时变小的动画<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-(void)popAnimated:(NSInteger)index&#123;</span><br><span class="line">    ///将iamgeView显示 (这个imageView一会儿就解释)</span><br><span class="line">    imageview.hidden = NO;</span><br><span class="line">    UIButton * sender = (UIButton *)[self.view viewWithTag:index];</span><br><span class="line">    ///pop回来先将button隐藏</span><br><span class="line">    sender.hidden = YES;</span><br><span class="line">    [UIView animateWithDuration:0.5f animations:^&#123;</span><br><span class="line">        ///imageView和Button一起完成回来时的旋转变小的动画，但我们只会看到imageView的</span><br><span class="line">        [imageview setTransform:CGAffineTransformMakeRotation(0)];</span><br><span class="line">        imageview.frame = CGRectMake(50 + ((kWidth + 20) * (sender.tag-100)), kY, kWidth, kHeight);</span><br><span class="line">        [sender setTransform:CGAffineTransformMakeRotation(0)];</span><br><span class="line">        sender.frame = CGRectMake(50 + ((kWidth + 20) * (sender.tag-100)), kY, kWidth, kHeight);</span><br><span class="line">    &#125; completion:^(BOOL finished) &#123;</span><br><span class="line">        ///动画执行完毕  将button显示，imageView隐藏</span><br><span class="line">        sender.hidden = NO;</span><br><span class="line">        imageview.hidden = YES;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面来解释一下会什么多了一个imageView，讲道理这个iamgeView本应该是不存在的！之所以用到，是我发现在pop回来时执行旋转还原和大小坐标还原动画时，button的实际尺寸大小和它的背景图片不一致，这个让我费解！很诡异！！！ 不知道你们有没有遇到过，如果遇到过这种疑难杂症的话，希望能教教是怎么解决的！多加一个imageView是我的解决方案！</p><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>本篇文章的demo已经上传到github  有兴趣的朋友可以下载！demo的完整代码功能不只是这些！<br>如果可以的话！希望您能给我点颗星星，您的鼓励是我最大的动力！！！<br>demo地址：<a href="https://github.com/zezeyu/rotation" target="_blank" rel="noopener">https://github.com/zezeyu/rotation</a></p><h4 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h4><p>本篇只是介绍了第一个控制器的动画！下篇是接着介绍第二个控制器的轮播图的动画，加怎么用三个View实现无限轮播<br>如下:<br><img src="/img/iOS/animation2.gif" alt="示例"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>想玩一下爬虫吗？</title>
    <link href="http://yoursite.com/2018/05/03/%E6%83%B3%E7%8E%A9%E4%B8%80%E4%B8%8B%E7%88%AC%E8%99%AB%E5%90%97%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/05/03/想玩一下爬虫吗？/</id>
    <published>2018-05-03T07:30:19.000Z</published>
    <updated>2018-05-03T08:02:40.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="玩爬虫不？-超简单的-python写个爬虫就几句话！这个地址-http-www-chinalaw-gov-cn-art-2018-3-12-art-11-207556-html-把数据拿下来-生成类似这样的字典数组"><a href="#玩爬虫不？-超简单的-python写个爬虫就几句话！这个地址-http-www-chinalaw-gov-cn-art-2018-3-12-art-11-207556-html-把数据拿下来-生成类似这样的字典数组" class="headerlink" title="玩爬虫不？ 超简单的! python写个爬虫就几句话！这个地址: http://www.chinalaw.gov.cn/art/2018/3/12/art_11_207556.html 把数据拿下来~生成类似这样的字典数组:"></a>玩爬虫不？ 超简单的! python写个爬虫就几句话！这个地址: <a href="http://www.chinalaw.gov.cn/art/2018/3/12/art_11_207556.html" target="_blank" rel="noopener">http://www.chinalaw.gov.cn/art/2018/3/12/art_11_207556.html</a> 把数据拿下来~生成类似这样的字典数组:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;name&quot;:&quot;xx&quot;,&quot;value&quot;:&quot;xx&quot;&#125;]</span><br><span class="line">name字段描述第几条~</span><br><span class="line">value字段描述该条的内容</span><br><span class="line">如&#123;&quot;name&quot;:&quot;第一条&quot;,&quot;value&quot;:&quot;中国共产党万岁&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h6 id="语言-python"><a href="#语言-python" class="headerlink" title="语言:python"></a>语言:python</h6><h6 id="框架-BeautifulSoup"><a href="#框架-BeautifulSoup" class="headerlink" title="框架:BeautifulSoup"></a>框架:BeautifulSoup</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from urllib.request import urlopen</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">import pymysql.cursors</span><br><span class="line"></span><br><span class="line">#请求URL并把结果用UTF-8编码</span><br><span class="line">resp = urlopen(&quot;http://www.chinalaw.gov.cn/art/2018/3/12/art_11_207556.html&quot;).read().decode(&quot;utf-8&quot;)</span><br><span class="line"></span><br><span class="line">#使用BeautifulSoup去解析</span><br><span class="line">soup = BeautifulSoup(resp, &quot;html.parser&quot;)</span><br><span class="line"></span><br><span class="line">#网站title</span><br><span class="line">title = soup.title.get_text()</span><br><span class="line"></span><br><span class="line">#获取所有p标签</span><br><span class="line">p_list = soup.findAll(&quot;p&quot;)</span><br><span class="line"></span><br><span class="line">for p_i in p_list:</span><br><span class="line">    text = p_i.string</span><br><span class="line">    # print(str(text))</span><br><span class="line">    rec = re.search(r&quot;(第.+?条)\s\s(.*[^\n])&quot;, str(text))</span><br><span class="line">    if rec:</span><br><span class="line">        print(rec.group(1))  # 第几条</span><br><span class="line">        print(rec.group(2))  # 对应的内容</span><br><span class="line">        # 改成你自己的数据库</span><br><span class="line">        connection = pymysql.connect(host=&apos;xx.xx.xx.xx&apos;, user=&apos;hz&apos;, password=&apos;yao&apos;, db=&apos;crawler&apos;, charset=&apos;utf8mb4&apos;, )</span><br><span class="line">        try:</span><br><span class="line">            with connection.cursor() as cursor:</span><br><span class="line">                sql = &quot;insert into `news`(`title`,`content`) values(%s,%s)&quot;</span><br><span class="line"></span><br><span class="line">                cursor.execute(sql, (rec.group(1), rec.group(2)))</span><br><span class="line">                connection.commit()</span><br><span class="line">        finally:</span><br><span class="line">            connection.close()</span><br></pre></td></tr></table></figure><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>要不给我点颗星星？<br>地址: <a href="https://github.com/zezeyu/crawler" target="_blank" rel="noopener">https://github.com/zezeyu/crawler</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS AVFoundation学习之人脸识别</title>
    <link href="http://yoursite.com/2018/04/28/iOS-AVFoundation%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    <id>http://yoursite.com/2018/04/28/iOS-AVFoundation学习之人脸识别/</id>
    <published>2018-04-28T15:27:43.000Z</published>
    <updated>2018-05-03T10:05:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>首先感谢简书上的大佬，看了大佬的几篇AVFoundation文章和资料受益匪浅！（还是女的，让人佩服！！！）<br>在这里和大家分享学习的心得，也能为自己巩固一下！这篇文章不太适合学习，更像是我的笔记！给大家安利大佬的传送门！<br>大佬的传送门: <a href="https://www.jianshu.com/u/1b4c832fb2ca" target="_blank" rel="noopener">https://www.jianshu.com/u/1b4c832fb2ca</a></p><h4 id="iOS可以用哪些框架做到人脸识别？"><a href="#iOS可以用哪些框架做到人脸识别？" class="headerlink" title="iOS可以用哪些框架做到人脸识别？"></a>iOS可以用哪些框架做到人脸识别？</h4><h5 id="1-CoreImage"><a href="#1-CoreImage" class="headerlink" title="1.CoreImage"></a>1.CoreImage</h5><p>CoreImage是苹果原生的，做静态人脸识别</p><h5 id="2-face"><a href="#2-face" class="headerlink" title="2.face++"></a>2.face++</h5><p>face++是阿里旗下的，也是用的最多的第三方！收费  支付宝、360、美颜相机都用这个，因为是第三方，所以上手会比较简单! 功能也特别的多！</p><h5 id="3-OpenCV"><a href="#3-OpenCV" class="headerlink" title="3.OpenCV"></a>3.OpenCV</h5><p>OpenCV难度就高了，逼格也高！</p><h5 id="4-libefacedetection"><a href="#4-libefacedetection" class="headerlink" title="4.libefacedetection"></a>4.libefacedetection</h5><p>libefacedetection这个是专门在C++做人脸识别的，速度超快！</p><h5 id="5-AVFoundation"><a href="#5-AVFoundation" class="headerlink" title="5.AVFoundation"></a>5.AVFoundation</h5><p>AVFoundation 这个框架是iOS开发必须要学习的，功能超强大！</p><h5 id="6-vision"><a href="#6-vision" class="headerlink" title="6.vision"></a>6.vision</h5><p>vision是在iOS 11.0推出来的 vision的功能也挺强大！但是必须要系统11.0以上</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>用AVFoundation做人脸识别的前提，要用AVFoundation写一个相机！</p><p>demo地址: <a href="https://github.com/zezeyu/FaceRecognition" target="_blank" rel="noopener">https://github.com/zezeyu/FaceRecognition</a></p><p>必须实现的方法有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">///AVCaptureSession对象来执行输入设备和输出设备之间的数据传递</span><br><span class="line">@property (strong, nonatomic) AVCaptureSession *captureSession;</span><br><span class="line">///输入的设备</span><br><span class="line">@property (weak, nonatomic) AVCaptureDeviceInput *activeVideoInput;</span><br><span class="line">///照片输出流</span><br><span class="line">@property (strong, nonatomic) AVCaptureStillImageOutput *imageOutput;</span><br><span class="line">///视频输出流</span><br><span class="line">@property (strong, nonatomic) AVCaptureMovieFileOutput *movieOutput;</span><br><span class="line">///输入的url</span><br></pre></td></tr></table></figure></p><p>iOS识别人脸最对一次能获取10张人脸，不能再多了！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)setupSessionOutputs:(NSError **)error &#123;</span><br><span class="line"></span><br><span class="line">    self.metadataOutput = [[AVCaptureMetadataOutput alloc] init];</span><br><span class="line">    </span><br><span class="line">    if ([self.captureSession canAddOutput:self.metadataOutput]) &#123;</span><br><span class="line">        [self.captureSession addOutput:_metadataOutput];</span><br><span class="line">        ///获取人脸属性</span><br><span class="line">        NSArray *metadatObjectTypes = @[AVMetadataObjectTypeFace];</span><br><span class="line">        </span><br><span class="line">        self.metadataOutput.metadataObjectTypes = metadatObjectTypes;</span><br><span class="line">        </span><br><span class="line">        dispatch_queue_t mainQueue = dispatch_get_main_queue();</span><br><span class="line">        </span><br><span class="line">        ///一次可以同时获取10张人脸，不能再多了！！！</span><br><span class="line">        [self.metadataOutput setMetadataObjectsDelegate:self queue:mainQueue];</span><br><span class="line">        </span><br><span class="line">        return YES;</span><br><span class="line">        </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        NSLog(@&quot;Set Session Error!&quot;);</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>处理识别到后的人脸方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">- (void)didDetectFaces:(NSArray *)faces &#123;</span><br><span class="line"></span><br><span class="line">    ///1.直接获取的人脸数据，针对摄像头坐标系，而不是针对UIKit</span><br><span class="line">    NSArray *transformFaces = [self transformedFacesFromFaces:faces];</span><br><span class="line">    </span><br><span class="line">    ///移除列表 如何判定人脸是否该移除</span><br><span class="line">    NSMutableArray *lostFaces = [self.faceLayers.allKeys mutableCopy];</span><br><span class="line">    for (AVMetadataFaceObject *face in transformFaces) &#123;</span><br><span class="line">        ///获取人脸id</span><br><span class="line">        NSNumber * faceID = @(face.faceID);</span><br><span class="line">        </span><br><span class="line">        [lostFaces removeObject:faceID];</span><br><span class="line">        </span><br><span class="line">        CALayer *layer = self.faceLayers[faceID];</span><br><span class="line">        //key--&gt;faceID</span><br><span class="line">        //value---&gt;对应的图层</span><br><span class="line">        </span><br><span class="line">        if (!layer) &#123;</span><br><span class="line">            ///new face</span><br><span class="line">            layer = [self makeFaceLayer];</span><br><span class="line">            </span><br><span class="line">            [self.overLayer addSublayer:layer];</span><br><span class="line">            ///把最新的人脸数据添加到字典中</span><br><span class="line">            self.faceLayers[faceID] = layer;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        ///frame</span><br><span class="line">        ///transform 缩放、旋转、移动</span><br><span class="line">        layer.transform = CATransform3DIdentity;</span><br><span class="line">        </span><br><span class="line">        layer.frame = face.bounds;</span><br><span class="line">        ///角度</span><br><span class="line">        ///roll Angle--斜倾角，认得头部围绕肩部方向的倾斜角度</span><br><span class="line">        ///yaw Angle --偏转角 人脸围绕Y轴旋转</span><br><span class="line">        </span><br><span class="line">        ///底部如何实现旋转的？？？</span><br><span class="line">        if (face.hasRollAngle) &#123;</span><br><span class="line">            //3D -- 就是一个简单的矩阵</span><br><span class="line">            CATransform3D t = [self transformForRollAngle:face.rollAngle];</span><br><span class="line">        </span><br><span class="line">            ///连接 如何连接  用线性代数</span><br><span class="line">            //1.layer图层的矩阵 * 旋转矩阵</span><br><span class="line">            layer.transform = CATransform3DConcat(layer.transform, t);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        ///是否有偏转角(左右摇头)</span><br><span class="line">        if (face.hasYawAngle) &#123;</span><br><span class="line">            CATransform3D t = [self transformForYawAngle:face.yawAngle];</span><br><span class="line">            </span><br><span class="line">            layer.transform = CATransform3DConcat(layer.transform, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //移除列表</span><br><span class="line">    for (NSNumber * faceID in lostFaces) &#123;</span><br><span class="line">        CALayer *layer = self.faceLayers[faceID];</span><br><span class="line">        [layer removeFromSuperlayer];</span><br><span class="line">        [self.faceLayers removeObjectForKey:faceID];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>这是我们公司的大佬，超牛批!<br><img src="/img/iOS/WechatIMG31.jpeg" alt="示例"><br><img src="/img/iOS/WechatIMG32.jpeg" alt="示例2"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>因为我也是学习了大佬分享的文章和资料，所以文章也写的不好！主要是为了为自己巩固一下！如果您看了我的这篇博客，我还是给您安利一下大佬们的链接！<br>大家一起学习 <a href="https://www.jianshu.com/u/1b4c832fb2ca" target="_blank" rel="noopener">https://www.jianshu.com/u/1b4c832fb2ca</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CAShapeLayer与贝塞尔曲线的结合使用</title>
    <link href="http://yoursite.com/2018/04/28/CAShapeLayer%E4%B8%8E%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E7%9A%84%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/28/CAShapeLayer与贝塞尔曲线的结合使用/</id>
    <published>2018-04-28T14:04:56.000Z</published>
    <updated>2018-04-28T15:20:56.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>之前写过一篇关于贝塞尔曲线绘制时刻速度表的文章！之前的文章是在drawRect使用贝塞尔曲线绘制图表！本篇主要讲述CAShapeLayer与贝塞尔曲线的结合使用！CAShapeLayer与drawRect的优缺点</p><p>####CAShapeLayer<br>CAShapeLayer继承自CALayer，因此，可使用CALayer的所有属性。CAShapeLayer属于CoreAnimation框架，通过GPU来渲染图形，节省性能。动画渲染直接提交给手机GPU，不消耗内。<br>CAShapeLayer能根据贝塞尔曲线的path路径来绘制你想要的图形！<br>CAShapeLayer给我们绘制自定义组件，自定义动画起到了关键作用！</p><h5 id="CAShapeLayer主要属性使用"><a href="#CAShapeLayer主要属性使用" class="headerlink" title="CAShapeLayer主要属性使用"></a>CAShapeLayer主要属性使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">frame               //就是frame啦</span><br><span class="line">strokeColor         //边缘线的颜色 （CGColor）</span><br><span class="line">fillColor           //闭环填充的颜色（CGColor）</span><br><span class="line">lineCap             //边缘线的类型</span><br><span class="line">path                //从bezier曲线获取到的形状</span><br><span class="line">lineWidth           //线条宽度</span><br><span class="line">strokeStart         //CGFloat类型，[0,1]表示画边线的起点和终点（即在路径上的百分比）</span><br><span class="line">strokeEnd           //CGFloat类型，[0,1]表示画边线的起点和终点（即在路径上的百分比）</span><br><span class="line">lineDashPattern     //设置边线的样式</span><br><span class="line">lineDashPhase       //边线样式的起始位置</span><br></pre></td></tr></table></figure><h4 id="DrawRect"><a href="#DrawRect" class="headerlink" title="DrawRect"></a>DrawRect</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (void)drawRect:(CGRect)rect &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>drawRect 是view的一个方法，可以帮我们绘制图形。DrawRect属于CoreGraphic框架，占用CPU，消耗性能大。只能在view里面使用！<br>想在其他地方重调drawRect方法时需要调用setNeedsDisplay方法，让drawRect方法重新调用一次。</p><h4 id="CAShapeLayer和DrawRect比较"><a href="#CAShapeLayer和DrawRect比较" class="headerlink" title="CAShapeLayer和DrawRect比较"></a>CAShapeLayer和DrawRect比较</h4><p>CAShapeLayer性能更卓越，渲染快速，高效使用内存。不会被图层边界剪裁掉。<br>DrawRect占用CPU，消耗性能大。</p><h4 id="CAShapeLayer与贝塞尔曲线的使用（上代码）"><a href="#CAShapeLayer与贝塞尔曲线的使用（上代码）" class="headerlink" title="CAShapeLayer与贝塞尔曲线的使用（上代码）"></a>CAShapeLayer与贝塞尔曲线的使用（上代码）</h4><p><img src="/img/iOS/demo.png" alt="示例"></p><p>还是拿上面的这个需求为例子！</p><p>首先第一部！<br>对还是画线、画线、根据数据画不同颜色的线<br>绘制贝塞尔曲线，上代码！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (UIBezierPath *)startPoint:(CGFloat)startPoint_X addLineTo_Point:(CGFloat)linePoint_X</span><br><span class="line">&#123;</span><br><span class="line">    UIBezierPath *path = [UIBezierPath bezierPath];</span><br><span class="line">    path.lineWidth = self.bounds.size.height;</span><br><span class="line">    [path moveToPoint:CGPointMake(startPoint_X, self.bounds.size.height/2)];//起始点</span><br><span class="line">    [path addLineToPoint:CGPointMake(linePoint_X, self.bounds.size.height/2)];//结束点</span><br><span class="line">    return path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后下一部！<br>把贝塞尔曲线路径交给CAShapeLayer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- (CAShapeLayer *)createShapeLayer:(UIColor *)color startPoint:(CGFloat)startPoint_X addLineTo_Point:(CGFloat)linePoint_X</span><br><span class="line">&#123;</span><br><span class="line">    UIBezierPath *path = [UIBezierPath bezierPath];</span><br><span class="line">    path.lineWidth = self.bounds.size.height;</span><br><span class="line">    [path moveToPoint:CGPointMake(startPoint_X, self.bounds.size.height/2)];</span><br><span class="line">    [path addLineToPoint:CGPointMake(linePoint_X, self.bounds.size.height/2)];</span><br><span class="line">    </span><br><span class="line">    ///顺便给路径加一个动画</span><br><span class="line">    CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@&quot;strokeEnd&quot;];</span><br><span class="line">    animation.duration = 1;//动画时间</span><br><span class="line">    animation.fromValue = @(0);</span><br><span class="line">    animation.toValue = @(1);</span><br><span class="line">    animation.repeatCount = 1;//只执行一次</span><br><span class="line">    </span><br><span class="line">    CAShapeLayer *layer = [CAShapeLayer layer];</span><br><span class="line">    layer.path = path.CGPath;//关键代码，把贝塞尔曲线路径交给CAShapeLayer</span><br><span class="line">    layer.strokeColor = color.CGColor;</span><br><span class="line">    //设置填充色</span><br><span class="line">    layer.lineWidth = self.bounds.size.height;</span><br><span class="line">    layer.fillColor = color.CGColor;</span><br><span class="line">    [layer addAnimation:animation forKey:@&quot;strokeEndAnimation&quot;];</span><br><span class="line">    //添加到视图的layer上面</span><br><span class="line">    [self.layer addSublayer:layer];</span><br><span class="line">    </span><br><span class="line">    return layer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后在根据数据去加载显示<br>下图是最后结果样式!<br><img src="/img/iOS/4y28r.gif" alt="动图">  <img src="/img/iOS/sulv.png" alt="示例2"></p><h4 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址"></a>demo地址</h4><p>demo地址：<a href="https://github.com/zezeyu/travelRange-demo" target="_blank" rel="noopener">https://github.com/zezeyu/travelRange-demo</a><br>你们的Star是我最大的动力 哈哈 给颗星星鼓励一下咯!</p><p>谢谢观看！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>工作随记</title>
    <link href="http://yoursite.com/2018/04/18/%E5%B7%A5%E4%BD%9C%E9%9A%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/04/18/工作随记/</id>
    <published>2018-04-17T17:55:27.000Z</published>
    <updated>2018-08-15T01:35:24.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- #### 本篇不属于技术博客！就想和大家日哈白！讲讲我这两年几个月的工作经历！遇到的一些奇葩人，奇葩事！本人大学学的计算机专业！ 说起这个专业，哼！我压根就不是准备报这个专业的，尼玛当时手残眼瞎！我特妈以为毕业了是去山里炸山洞！爬电线杆子！挖隧道的呢！想想多高大上，炸山洞啊。。。多么牛逼。。。   大学上的第一节课！ 沃日  老师哪了个机箱子过来了！这是要干嘛！！！ 这节课下来，我尼玛算是知道了，沃日 选错专业了！ 极度不开心。。。当时我是我们班的纪检委员！牛逼吧！！！ 既然强行要我当了干部！ 那我肯定要发挥作用啊！ 😀 天天叫他们一起通宵打lol。。。 那日子过的真销魂！就这样我这个渣渣要毕业了#### 第一家公司人生第一份offer让人记忆犹新！！！ 拿到offer的那一刻，脑子里全是：握草！居然有人敢要我！当时找工作就找了三天！真是幸运，一家外包公司，给的待遇还不错，对于一个当时没毕业的渣渣来说！简直棒！！！上班前两天！我一直担心被人开除！因为实在是太菜了！所以我提前内推了我的基友大佬逼来我们公司（大佬逼当时在我们班算是有点厉害的吧）开始上班了！第一天，分配任务！是一个电商的项目！看了看UI图，当时直接懵逼了！害怕！有是购物车。有是收藏列表的！不是说给个很小的项目的吗！任务好艰巨！当时负责这个项目的人是我和阿逼还有我之后的老大(瞎牛逼，碰巧还是我老乡！我也不知道我运气为啥一直这么好！) 刚开始上班的那段时间，真让人难受！啥都不会，怎么办啊！这要被开除的啊！于是每天请大佬们吃饭！边吃饭边写代码问问题！晚上回家强行把老朱(我大学专业老师，瞎牛逼，什么都会！现在被传智博客高薪挖去讲java架构)电话叫醒控屏教我写代码！就这样工作了两个星期！有一天我换了一个方法，没提交svn，也忘记了告诉阿逼！导致了一个模块的闪退崩溃！公司把我们两个都开了  哈哈哈哈  真开了！！  当时的感想是：握草终于解脱了，去打lol去，开心死了！(当时想法还是太幼稚了吧)正当开心的时候！老徐（我们武汉这边负责人，人很好！）把我叫了回去谈话！ 老徐跟我说：我想你个机会，你就留在公司好好学习下，我看你人很阳光，性格也好，你考虑下。我说：不不不！ 感谢您的好意！我太菜了，在这里受不了！（哈哈哈 当时是把工作当好玩）这时候孙总（我老大，关系蛮好）进来了：你不会我来带你！你要你肯学！你自己想想！就这样我还居然还考虑了很久！咨询了我姐姐的意见！最后留在了公司！（感谢孙总、感谢老徐）就这样日常给自己加班！渐渐的慢慢会了不好！记得我的第一个app上线的那天！晚上在家发版一直不成功，差点咳出肺炎！更坑的事最后查看邮件！原因是Xcode中毒了，握草！！！  下了一个新版的Xcode终于发布成功了！我艹 开心死了好景不长 待了4个月的时候！尼玛刚转正，公司不行了！要垮了！ 都是个傻逼CEO 张涛 张涛 张涛 乱整应是每个客户都得罪了！我去 到后来欠了我2个月工资，3个月社保！！！ 差点没饿死##### 我去不知不觉转钟3点了！搞兴奋了！明天还有上班！不说了！  未完待续。。。如果你喜欢我的文章，在下面给我点小额打赏😀 --><h4 id="这篇文章我删了！！！"><a href="#这篇文章我删了！！！" class="headerlink" title="这篇文章我删了！！！"></a>这篇文章我删了！！！</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用hexo搭建个人github主页</title>
    <link href="http://yoursite.com/2018/04/18/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAgithub%E4%B8%BB%E9%A1%B5/"/>
    <id>http://yoursite.com/2018/04/18/使用hexo搭建个人github主页/</id>
    <published>2018-04-17T16:10:22.000Z</published>
    <updated>2018-04-17T17:35:30.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><h5 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h5><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>做为一个程序员，为了让自己逼格高一点点！还是有必要给自己搭建一个博客个人主页！本篇博客就是利用hexo手把手将你变得精致一点！（有自己的githup主页面试是可以加分的哦~）</p><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>本篇教程是基于Mac os环境下完成的</p><h4 id="第一步环境配置"><a href="#第一步环境配置" class="headerlink" title="第一步环境配置"></a>第一步环境配置</h4><blockquote><blockquote><p>安装Node （自己去官网下去，傻瓜式安装）</p></blockquote></blockquote><blockquote><blockquote><p>安装Git</p></blockquote></blockquote><blockquote><blockquote><p>GitHub账号</p></blockquote></blockquote><p>上述工具的安装和使用我不是本教程的重点，如果你对于它们都很陌生，那本教程就不大适合于你了🙁</p><h4 id="正式安装Hexo"><a href="#正式安装Hexo" class="headerlink" title="正式安装Hexo"></a>正式安装Hexo</h4><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><blockquote><blockquote><p>$ npm install -g hexo-cli</p></blockquote></blockquote><h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><blockquote><blockquote><p>hexo init <folder> （folder名称随意，你怎么高兴怎么取~）<br>cd <folder> （cd到folder目录）<br>npm install</folder></folder></p></blockquote></blockquote><h4 id="新建完成后，指定文件夹的目录如下："><a href="#新建完成后，指定文件夹的目录如下：" class="headerlink" title="新建完成后，指定文件夹的目录如下："></a>新建完成后，指定文件夹的目录如下：</h4><p><img src="/img/Hexo/Hexoscreenshots.png" alt="示例"></p><p>目录名或文件名                   作用<br>source            用于存放你所生成各种原始资源，你如你的帖子<br>themes                  存放你的站点主题及主题配置文件<br>config.yml        站点配置文件，部署，安装插件，修改样式时会用</p><h4 id="安装Hexo依赖"><a href="#安装Hexo依赖" class="headerlink" title="安装Hexo依赖"></a>安装Hexo依赖</h4><blockquote><blockquote><p>cd <folder><br>npm install</folder></p></blockquote></blockquote><h4 id="本地调式"><a href="#本地调式" class="headerlink" title="本地调式"></a>本地调式</h4><blockquote><blockquote><p>hexo s –debug</p></blockquote></blockquote><p><img src="/img/Hexo/hexoshili.png" alt="成功"></p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法 然后建立关联，我的Blog在本地/Users/heze/blog，blog是我之前建的站点</p><p>安装hexo与github相关联的package</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改站点配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure></p><p>在最下面，格式如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:zezeyu/zezeyu.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>这里我用到了SSH Keys，直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。</p><p>然后生成静态页面</p><blockquote><blockquote><p>hexo generate</p></blockquote></blockquote><p>如果有报错发生，执行下列操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-ejs --save</span><br><span class="line">npm install hexo-renderer-stylus --save</span><br><span class="line">npm install hexo-renderer-marked --save</span><br></pre></td></tr></table></figure></p><p>发布到你的github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>现在你就可以在浏览器访问你的地址了！ 例如我的：<a href="https://zezeyu.github.io" target="_blank" rel="noopener">https://zezeyu.github.io</a></p><h4 id="常用命令总结"><a href="#常用命令总结" class="headerlink" title="常用命令总结"></a>常用命令总结</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub</span><br><span class="line">hexo help  #查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure><p>最后要提到的就是主题！我现在用的主题是next，简洁方便！强行安利一波！</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>1.本篇博客参考了好朋友的博客！你们可以看看他的教程！大佬的传送门:<a href="https://deimo.github.io" target="_blank" rel="noopener">https://deimo.github.io</a><br>2.当然还有hexo官方文档:<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mac下安装virtualenv，以及安装virtualenvwrapper出错解决方案</title>
    <link href="http://yoursite.com/2018/04/17/mac%E4%B8%8B%E5%AE%89%E8%A3%85virtualenv%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85virtualenvwrapper%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2018/04/17/mac下安装virtualenv，以及安装virtualenvwrapper出错解决方案/</id>
    <published>2018-04-17T15:39:18.000Z</published>
    <updated>2018-04-17T15:52:44.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>virtualenv是Django很好的工具，能帮助我们管理虚拟环境。下面是在mac下如何安装使用</p><h4 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install virtualenv</span><br></pre></td></tr></table></figure><p>安装完成过后发现virtualenv用起来不是那么的方便，操作起来挺复杂的。</p><p>virtualenvwrapper 使得virtualenv变得更好用，所以我们一起安装了。</p><h4 id="安装virtualenvwrapper"><a href="#安装virtualenvwrapper" class="headerlink" title="安装virtualenvwrapper"></a>安装virtualenvwrapper</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install virtualenvwrapper</span><br></pre></td></tr></table></figure><p>结果问题就来了，报错了，提示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Exception:</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/basecommand.py"</span>, line 215, <span class="keyword">in</span> main</span><br><span class="line">    status = self.run(options, args)</span><br><span class="line">  File <span class="string">"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/commands/install.py"</span>, line 342, <span class="keyword">in</span> run</span><br><span class="line">    prefix=options.prefix_path,</span><br><span class="line">  File <span class="string">"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/req/req_set.py"</span>, line 778, <span class="keyword">in</span> install</span><br><span class="line">    requirement.uninstall(auto_confirm=True)</span><br><span class="line">  File <span class="string">"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/req/req_install.py"</span>, line 754, <span class="keyword">in</span> uninstall</span><br><span class="line">    paths_to_remove.remove(auto_confirm)</span><br><span class="line">  File <span class="string">"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/req/req_uninstall.py"</span>, line 115, <span class="keyword">in</span> remove</span><br><span class="line">    renames(path, new_path)</span><br><span class="line">  File <span class="string">"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/utils/__init__.py"</span>, line 267, <span class="keyword">in</span> renames</span><br><span class="line">    shutil.move(old, new)</span><br><span class="line">  File <span class="string">"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py"</span>, line 302, <span class="keyword">in</span> move</span><br><span class="line">    copy2(src, real_dst)</span><br><span class="line">  File <span class="string">"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py"</span>, line 131, <span class="keyword">in</span> copy2</span><br><span class="line">    copystat(src, dst)</span><br><span class="line">  File <span class="string">"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py"</span>, line 103, <span class="keyword">in</span> copystat</span><br><span class="line">    os.chflags(dst, st.st_flags)</span><br><span class="line">OSError: [Errno 1] Operation not permitted: <span class="string">'/tmp/pip-wUnCGE-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/six-1.4.1-py2.7.egg-info'</span></span><br></pre></td></tr></table></figure><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>原因是因为six的版本过低，所以在原来的安装命令下添加 ‘–ignore-install six’ 参数，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install virtualenvwrapper -v --ignore-install six</span><br></pre></td></tr></table></figure><p>最后检查six的版本，发现已更新到最新版本，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip show six</span><br></pre></td></tr></table></figure><p>得到输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Name: six</span><br><span class="line">Version: 1.11.0</span><br><span class="line">Summary: Python 2 and 3 compatibility utilities</span><br><span class="line">Home-page: http://pypi.python.org/pypi/six/</span><br><span class="line">Author: Benjamin Peterson</span><br><span class="line">Author-email: benjamin@python.org</span><br><span class="line">License: MIT</span><br><span class="line">Location: /Library/Python/2.7/site-packages</span><br><span class="line">Requires:</span><br></pre></td></tr></table></figure></p><p>以上就是我遇到的坑，希望能帮到大家！谢谢观看！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用runtime监听所有页面的UITextField (iOS）</title>
    <link href="http://yoursite.com/2018/03/04/%E5%88%A9%E7%94%A8runtime%E7%9B%91%E5%90%AC%E6%89%80%E6%9C%89%E9%A1%B5%E9%9D%A2%E7%9A%84UITextField-iOS%EF%BC%89/"/>
    <id>http://yoursite.com/2018/03/04/利用runtime监听所有页面的UITextField-iOS）/</id>
    <published>2018-03-04T07:24:42.000Z</published>
    <updated>2018-04-07T14:49:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 在开发iOS的过程中，我们都会遇到许多有UITextField的页面，有的页面还不只一个。当我们提交填写的表单时，都会判断，是不是每个输入框都填写完成。效果如下：</p><p><img src="/img/iOS/20180303003453784.gif" alt="示例"></p><p>如上图，当页面输入框都输入完毕后，才能做下一步操作！但是要每个输入框页面都做判断的话，很麻烦!</p><p>所以我们可以利用runtime，提前在BaseViewController里面做好所有判断操作，让有输入框的界面继承Base,通过runtime父类遍历出子类的成员，拿到子类页面所有输入框！这样省了很多事了！</p><p>具体代码如下：</p><p>BaseViewController.h </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#import &lt;UIKit/UIKit.h&gt;</span></span><br><span class="line"><span class="comment">#import "UIButton+toos.h"</span></span><br><span class="line">@interface BaseViewController : UIViewController</span><br><span class="line">//告诉子类是否所有输入框是否填写完毕的block</span><br><span class="line">@property(nonatomic,copy)void(^isOKBlock)(BOOL isOk);</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>BaseViewController.m</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#import "BaseViewController.h"</span></span><br><span class="line">//首先导入runtime库</span><br><span class="line"><span class="comment">#import &lt;objc/runtime.h&gt;</span></span><br><span class="line">@interface BaseViewController ()&lt;UITextFieldDelegate,UITextViewDelegate&gt;</span><br><span class="line">&#123;</span><br><span class="line">    BOOL isOK;//用来判断是否所有输入框都输入完毕</span><br><span class="line">&#125;</span><br><span class="line">@property(nonatomic,strong)NSMutableDictionary * dic;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation BaseViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    //刚进来，肯定没输入！所以为NO</span><br><span class="line">    isOK =NO;</span><br><span class="line">    </span><br><span class="line">    self.dic = [NSMutableDictionary dictionary];</span><br><span class="line">    </span><br><span class="line">    //因为我们这里是父类，父类调用子类只能通过runtime做到！ 下面利用runtime遍历子类的成员变量</span><br><span class="line">    unsigned int outCount = 0;</span><br><span class="line">    Ivar * ivars = class_copyIvarList([self class], &amp;outCount);</span><br><span class="line">    <span class="keyword">for</span> (unsigned int i = 0; i &lt; outCount; i ++) &#123;</span><br><span class="line">        Ivar ivar = ivars[i];</span><br><span class="line">        const char * name = ivar_getName(ivar);//获取成员变量名字</span><br><span class="line">        const char * <span class="built_in">type</span> = ivar_getTypeEncoding(ivar);//获取成员的原型</span><br><span class="line">        <span class="keyword">if</span> (strcmp(<span class="built_in">type</span>, <span class="string">"@\"UITextField\""</span>) == 0)//如果<span class="built_in">type</span>是UITextField就进入方法</span><br><span class="line">        &#123;</span><br><span class="line">            NSString * s = [NSString stringWithFormat:@<span class="string">"%s"</span>,name];//UITextField的名称</span><br><span class="line">            UITextField * field = [(UITextField * )self valueForKey:s];//获取UITextField</span><br><span class="line">            field.delegate = self;//签代理</span><br><span class="line">            //监听UITextField改变的方法</span><br><span class="line">      [field addTarget:self action:@selector(textFieldWithText:) forControlEvents:UIControlEventEditingChanged];</span><br><span class="line">            //下面这行是利用字典记录UITextField的个数，以及内容</span><br><span class="line">            [self.dic setValue:@<span class="string">""</span> forKeyPath:[NSString stringWithFormat:@<span class="string">"%d"</span>,i+100]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (strcmp(<span class="built_in">type</span>, <span class="string">"@\"UITextView\""</span>) == 0) &#123;</span><br><span class="line">            NSString * s = [NSString stringWithFormat:@<span class="string">"%s"</span>,name];</span><br><span class="line">            UITextView * field = [(UITextField * )self valueForKey:s];</span><br><span class="line">            field.delegate = self;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free(ivars);</span><br><span class="line">    </span><br><span class="line">    // Do any additional setup after loading the view.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)textFieldWithText:(UITextField *)textField</span><br><span class="line">&#123;</span><br><span class="line">    unsigned int outCount = 0;</span><br><span class="line">    Ivar * ivars = class_copyIvarList([self class], &amp;outCount);</span><br><span class="line">    <span class="keyword">for</span> (unsigned int i = 0; i &lt; outCount; i ++) &#123;</span><br><span class="line">        Ivar ivar = ivars[i];</span><br><span class="line">        const char * name = ivar_getName(ivar);</span><br><span class="line">        const char * <span class="built_in">type</span> = ivar_getTypeEncoding(ivar);</span><br><span class="line">        <span class="keyword">if</span> (strcmp(<span class="built_in">type</span>, <span class="string">"@\"UITextField\""</span>) == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            NSString * s = [NSString stringWithFormat:@<span class="string">"%s"</span>,name];</span><br><span class="line">            UITextField * field = [(UITextField * )self valueForKey:s];</span><br><span class="line">            //每个输入框的改变，字典的value都会一起改变。</span><br><span class="line">            [self.dic setValue:field.text forKeyPath:[NSString stringWithFormat:@<span class="string">"%d"</span>,i+100]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free(ivars);</span><br><span class="line">    isOK = YES;//这里的意思是，输入后，先给你个YES 然后走下面的代码</span><br><span class="line">    <span class="keyword">for</span> (NSString * string <span class="keyword">in</span> [self.dic allValues]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (string.length&lt;1) &#123;//只要发现输入后有输入框的值为空就为NO</span><br><span class="line">            isOK =NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//下面就是返回结果给子类</span><br><span class="line">    <span class="keyword">if</span> (self.isOKBlock) &#123;</span><br><span class="line">        self.isOKBlock(isOK);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(BOOL)textFieldShouldReturn:(UITextField *)textField&#123;</span><br><span class="line">    [textField resignFirstResponder];</span><br><span class="line">    <span class="built_in">return</span> YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)viewWillDisappear:(BOOL)animated&#123;</span><br><span class="line">    [super viewWillDisappear:animated];</span><br><span class="line">    [[[UIApplication sharedApplication] keyWindow] endEditing:YES];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)didReceiveMemoryWarning &#123;</span><br><span class="line">    [super didReceiveMemoryWarning];</span><br><span class="line">    // Dispose of any resources that can be recreated.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"><span class="comment">#pragma mark - Navigation</span></span><br><span class="line"></span><br><span class="line">// In a storyboard-based application, you will often want to <span class="keyword">do</span> a little preparation before navigation</span><br><span class="line">- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender &#123;</span><br><span class="line">    // Get the new view controller using [segue destinationViewController].</span><br><span class="line">    // Pass the selected object to the new view controller.</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>在子类中调用父类的block就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[_button setNotOptionalBut];</span><br><span class="line">    __weak typeof(self)weakself = self;</span><br><span class="line">    self.isOKBlock = ^(BOOL isOK)&#123;</span><br><span class="line">        <span class="keyword">if</span> (isOK) &#123;//输入完毕</span><br><span class="line">            [weakself.button setOptionalBut];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;//没输入完</span><br><span class="line">            [weakself.button setNotOptionalBut];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>这是监听结果的改变！这样就方便了许多！</p><p>demo地址：<a href="https://github.com/zezeyu/iOS-demo/" target="_blank" rel="noopener">https://github.com/zezeyu/iOS-demo/</a></p><p>谢谢观看！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
</feed>
